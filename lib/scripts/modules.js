#!/usr/bin/env node

/**
 * External dependencies
 */
import fs from 'fs';
import path from 'path';

// Constants
const namespace = 'CAWeb';
const srcPath = path.join(process.cwd(), 'src');
const modulesPath = path.join(srcPath, 'modules');
const moduleNames = fs.readdirSync(modulesPath, {withFileTypes: true} ).filter( Dirent => Dirent.isDirectory()  ).map( Dirent => Dirent.name ) ;

// module index.js file content
let indexJS = [
     `// Autogenerated file, do not edit directly\n`, // comment
     `\n// External Dependencies.`, // comment
     `\nimport { omit } from 'lodash';\n`, // import statement
     `\n// WordPress Dependencies.`, // comment
    `\nimport { addAction, addFilter } from '@wordpress/hooks';\n`, // import statement
    `\n// Divi Dependencies.\n`, // comment
    `import { registerModule } from '@divi/module-library';\n\n`, // import statement
     `// Modules.\n`, // comment
];

// module index.php file content
let indexPHP = [
     `<?php\n`, // comment
     `/**\n`, // comment
     ` * Autogenerated file, do not edit directly\n`, // comment
     ` *\n`, // comment
     ` * @package ${namespace}\\Modules\n`, // comment
     ` */\n\n`, // comment
     `namespace ${namespace}\\Modules;\n\n`, // comment
     `if ( ! defined( 'ABSPATH' ) ) {\n`, // sanity check
     `\tdie( 'Direct access forbidden.' );\n`, // die statement
     `}\n\n`, // close if statement
];

let depTree = [];
let moduleRegistration = [];

// loop through modules names
moduleNames.forEach( (module) => { 
     // uppercase the first letter of each word and remove the dashes and underscores.
     let importName = module.replaceAll(/[-_]([\w]{1})/g, (m, g) => g.toUpperCase())
     //importName = importName.charAt(0).toUpperCase() + importName.slice(1);

    // add the import to the index file
    indexJS.push( `import { ${importName}Module } from './${importName}';\n` );

    // add module registration to the index file
    moduleRegistration.push( `\tregisterModule( ${importName}Module.metadata, omit( ${importName}Module, 'metadata' ) );\n` );

    // add use statement to the index php file
    indexPHP.push( `use ${namespace}\\Modules\\${importName}\\${importName}Module;\n` );

    // add module to the dependency tree
    depTree.push( `\t\t$dependency_tree->add_dependency( new ${importName}Module() );` );
});

// add additional filters/actions to the index file
indexJS = indexJS.concat(
     [
          `\n// Register modules.\n`, // comment
          `addAction('divi.moduleLibrary.registerModuleLibraryStore.after', '${namespace.toLowerCase()}.registerModuleLibraryStore', () => {\n`, // add action to register module library store
          moduleRegistration.join(''), // register modules
          `});\n`, // close action
     ]
);

// add additional code to the index php
indexPHP = indexPHP.concat(
     [
          `\nadd_action('divi_module_library_modules_dependency_tree',\n`, // add action to add dependency tree
          `\tfunction( $dependency_tree ) {\n`, // open function
          depTree.join('\n'), // add dependency tree
          `\n\t}\n`, // close function
          `);\n`, // close action
     ]
);

// write the modules index.ts file
fs.writeFileSync(
     path.join( modulesPath, 'index.ts' ),
     indexJS.join( '' )
);


// write the modules index.php file
fs.writeFileSync(
     path.join( modulesPath, 'index.php' ),
     indexPHP.join( '' )
);